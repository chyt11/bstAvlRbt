红黑树的节点插入默认是节点为红色的。

   插入操作：解决的是 红-红 问题
      删除操作：解决的是 黑-黑 问题


插入：
1、根节点
直接把此结点涂为黑色

1、黑父
不用做任何调整

2、红父
2.1 红叔	（黑曾祖）
当叔父结点为红色时，如下图所示，无需进行旋转操作，只要将父和叔结点变为黑色，将祖父结点变为红色即可。但由于祖父结点的父结点有可能为红色，从而违反红黑树性质。此时必须将祖父结点作为新的判定点继续向上（迭代）进行平衡操作。（注意这里是需要迭代的，有可能会调整到根节点）（其实这种情况包括4种，只需调整颜色，不需要旋转树形）

2.2 黑叔
当叔父结点为黑色时，需要进行旋转，也需要改颜色。



删除：
1、如果Y指向的节点是个红色节点，那么直接删除掉Y以后，红黑性质不会被破坏。操作结束。

2、如果Y指向的节点是个黑色节点，
以X为其父的左孩子为例
2.1：X的兄弟W是红色（想办法将其变为黑色）
 （由于W是红色的，因此其儿子节点和父节点必为黑色，）只要将W和其父节点的颜色对换，在对父节点进行一次左旋转，便将W的左子节点放到了X的兄弟节点上，X的兄弟节点变成了黑色，且红黑性质不变。但还不算完，只是暂时将情况1转变成了下面的情况2或3或4。

2.2、X的兄弟节点W是黑色的，而且W的两个子节点都是黑色的。
此时可以将X的一重黑色和W的黑色同时去掉，而转加给他们的父节点上，这是X就指向它的父节点了，因此此时父节点具有双重颜色了。这一重黑色节点上移。把w的黑给去掉，成为红色。
2.2.1、如果父节点原来是红色的，现在又加一层黑色，那么X现在指向的这个节点就是红黑两色的，直接把X（也就是父节点）着为黑色。问题就已经完整解决了。
2.2.2、如果父节点现在是双层黑色，那就以父节点为新的X进行向上的下一次的递归。

2.3、X的兄弟节点W是黑色的，而且W的左子节点L是红色的，右子节点是黑色的。
此时通过交换W和其左子节点的颜色并进行一次向右旋转就可转换成下面的第四种情况。注意，原来L是红色的，所以L的子节点一定是黑色的，所以旋转中L节点的一个子树挂到之后着为红色的W节点上不会破坏红黑性质。变形后黑色高度不变。然后转向2.4处理。

2.4、X的兄弟节点W是黑色的，而且W的右子节点是红色的。
这种情况下，对X的父节点做一次左旋，W就处于根的位置，将W保持为原来的根的位置的颜色，同时将W的两个新的儿子节点的颜色变为黑色，去掉X的一重黑色。这样整个问题也就得到了解决。递归结束。（在代码上，为了标识递归结束，我们把X指向根节点） 
















